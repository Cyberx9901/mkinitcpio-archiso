# args: source, mountpoint
_mnt_bind()
{
    msg "::: Binding ${1} to ${2}"
    mkdir -p /real_root${2}
    /bin/mount -o bind ${1} /real_root${2}
}

# args: /path/to/image_file
_mnt_squashfs()
{
    /bin/modprobe -q loop >/dev/null 2>&1
    
    img="${1}"
    base_img="${img##*/}";
    mnt="${2}"

    if [ "${copytoram}" = "y" ]; then
        msg ":: Copying squashfs image to RAM"
        /bin/cat ${img} > "/tmpfs/${base_img}"
        img="/tmpfs/${base_img}"
    fi

    msg "::: Adding new aufs branch: ${base_img%.*}"
    mkdir -p "/tmpfs/mnt/loop${LOOP_NUM}"
    # sometimes it takes udev a while to create device nodes
    while [ ! -e "/dev/loop${LOOP_NUM}" ]; do
        sleep 1
    done
    if ! /bin/losetup "/dev/loop${LOOP_NUM}" ${img}; then
        echo "ERROR: Cannot mount loop device /dev/loop${LOOP_NUM}"
        break
    fi
    /bin/mount -r -t squashfs "/dev/loop${LOOP_NUM}" "/tmpfs/mnt/loop${LOOP_NUM}"
    if [ "${mnt}" = "/" ]; then
        /bin/mount -t aufs -o remount,append:/tmpfs/mnt/loop${LOOP_NUM}=ro none "/real_root"
    else
        _mnt_bind "/tmpfs/mnt/loop${LOOP_NUM}" "${mnt}"
    fi
    export LOOP_NUM=$(( $LOOP_NUM + 1 ))
}

run_hook ()
{
    if [ "x${arch}" = "x" ]; then
        arch="$(uname -m)"
    fi

    if [ "x${tmpfs_size}" = "x" ]; then
        tmpfs_size="75%"
    fi

    if [ "x${isomounts}" != "x" ]; then
        isomounts="/bootmnt/${isomounts}"
    else
        isomounts="/bootmnt/isomounts"
    fi

    msg -n ":: Mounting tmpfs, size=${tmpfs_size}..."
    mount -t tmpfs -o "size=${tmpfs_size}" tmpfs /tmpfs
    msg "done."

    msg ":: Waiting for boot device..."

    /bin/mkdir -p /bootmnt
    while ! poll_device /dev/archiso 30; do
      echo "ERROR: boot device didn't show up after 30 seconds..."
      echo "   Falling back to interactive prompt"
      echo "   You can try to fix the problem manually, log out when you are finished"
      PS1="ramfs$ " /bin/sh -i
    done

    eval $(fstype < /dev/archiso 2>/dev/null)
    if [ -n "${FSTYPE}" ]; then
        if [ "${FSTYPE}" = "unknown" ]; then
            # First try mounting then with vfat, maybe someone put the image on
            # USB stick with unetbootin or similar. vfat is not detected by fstype.
            _FSTYPE="vfat"
        else
            _FSTYPE=$FSTYPE
        fi
        if mount -r -t "${_FSTYPE}" /dev/archiso /bootmnt >/dev/null 2>&1; then
            if [ -e "${isomounts}" ]; then
                echo "SUCCESS: Mounted archiso volume successfully."
            else
                echo "ERROR: Mounting was successful, but the ${isomounts} file does not exist."
                exit 1
            fi
        else
            if [ "${FSTYPE}" = "unknown" ]; then
                echo "ERROR: Failed to mount /dev/archiso (FS is unknown and not vfat)."
            else
                echo "ERROR; Failed to mount /dev/archiso (FS is ${FSTYPE}."
            fi
            exit 1
        fi
    else
        echo "ERROR: /dev/archiso found, but the filesystem type is unknown."
    fi

    /bin/modprobe -q squashfs >/dev/null 2>&1
    /bin/modprobe -q aufs >/dev/null 2>&1

    msg ":: Mounting root (aufs) filesystem"
    /bin/mount -t aufs -o dirs=/tmpfs=rw none /real_root

    export LOOP_NUM="0"
    msg ":: Mounting images"
    while read img imgarch mountpoint type; do
        # check if this line is a comment (starts with #)
        [ "${img#"#"}" != "${img}" ] && continue

        [ "$imgarch" != "$arch" ] && continue

        [ ! -r "/bootmnt/${img}" ] && continue

        if [ "${type}" = "bind" ]; then
            _mnt_bind "/bootmnt/${img}" ${mountpoint}
        elif [ "${type}" = "squashfs" ]; then
            _mnt_squashfs "/bootmnt/${img}" "${mountpoint}"
        fi
    done < "${isomounts}"

    # Bind our bootmnt dir into the live system
    _mnt_bind /bootmnt /bootmnt

    if [ -d /proc/sys/dev/cdrom ]; then
        echo 0 > /proc/sys/dev/cdrom/lock
        echo 0 > /proc/sys/dev/cdrom/autoeject
    fi

    if [ "${break}" = "y" ]; then
        echo ":: Break requested, type 'exit' to resume operation"
        echo "   NOTE: klibc contains no 'ls' binary, use 'echo *' instead"
        PS1="ramfs$ " /bin/sh -i
    fi

    udevpid=$(/bin/minips -C udevd -o pid=)
    [ "x${udevpid}" != "x" ] && /bin/kill -9 $udevpid 2>&1 >/dev/null
    #Yep, we're bailing out here.  We don't need kinit.
    msg ":: Passing control to Arch Linux Initscripts...Please Wait"
    /bin/umount /sys
    /bin/umount /proc
    exec /bin/run-init -c /dev/console /real_root /sbin/init ${CMDLINE}
}

# vim:ft=sh:ts=4:sw=4:et:
